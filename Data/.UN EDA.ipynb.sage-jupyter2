{"backend_state":"running","connection_file":"/projects/75e8805e-9d9a-4946-947e-b12344497944/.local/share/jupyter/runtime/kernel-509269df-e321-46b3-afe6-dbe98c64ee78.json","kernel":"ianenv","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1651443808551,"exec_count":1,"id":"595722","input":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer","kernel":"ianenv","no_halt":true,"pos":1,"start":1651443806930,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443808615,"exec_count":2,"id":"5cff6d","input":"df_emissions = pd.read_csv('Emissions.csv')\ndf_fossil_fuels = pd.concat([pd.read_csv('Fossil Fuels A.csv'), pd.read_csv('Fossil Fuels B.csv')])","kernel":"ianenv","no_halt":true,"pos":3,"start":1651443808574,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443808756,"exec_count":3,"id":"071473","input":"# Remove unused columns\ndf_emissions = df_emissions.rename(columns={'OBS_VALUE': 'Greenhouse Gas Emissions'}).drop(['DATAFLOW', 'FREQ', 'INDICATOR', 'UNIT'], axis=1)\ndf_fossil_fuels.drop(['DATAFLOW', 'FREQ', 'UNIT_MULT', 'UNIT_MEASURE', 'OBS_STATUS'], axis=1, inplace=True)\n\n# Create dictionary to map country codes and abbreviations\ndf_codes = pd.read_csv('Country_Codes.csv')\ncodes = df_codes['M49 Code']\nabbreviations = df_codes['ISO-alpha3 Code']\ncode_dict = dict(zip(codes, abbreviations))\n\n# Remap energy stats areas from numbers to abbreviations\ndf_fossil_fuels = df_fossil_fuels.replace({'REF_AREA': code_dict})","kernel":"ianenv","no_halt":true,"pos":4,"start":1651443808619,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443808829,"exec_count":4,"id":"533b5f","input":"# Add fossil fuel data\nfossil_fuel_codes = {100: 'Hard Coal', 3000: 'Natural Gas', 4100: 'Crude Oil', 4652: 'Motor Gasoline', 4670: 'Gas Oil/Diesel Oil'}\n\n# production\ntmp = df_fossil_fuels.loc[df_fossil_fuels['TRANSACTION'] == 1]\nfor code in fossil_fuel_codes:\n    tmp2 = tmp.loc[tmp['COMMODITY'] == code]\n    tmp2 = tmp2.drop(['COMMODITY', 'TRANSACTION'], axis=1).rename(columns={'OBS_VALUE': f'{fossil_fuel_codes[code]} Production'})\n    df_emissions = pd.merge(df_emissions, tmp2, on=['REF_AREA', 'TIME_PERIOD'], how='left')\n\n# import\ntmp = df_fossil_fuels.loc[df_fossil_fuels['TRANSACTION'] == 3]\nfor code in fossil_fuel_codes:\n    tmp2 = tmp.loc[tmp['COMMODITY'] == code]\n    tmp2 = tmp2.drop(['COMMODITY', 'TRANSACTION'], axis=1).rename(columns={'OBS_VALUE': f'{fossil_fuel_codes[code]} Import'})\n    df_emissions = pd.merge(df_emissions, tmp2, on=['REF_AREA', 'TIME_PERIOD'], how='left')\n\n# export\ntmp = df_fossil_fuels.loc[df_fossil_fuels['TRANSACTION'] == 4]\nfor code in fossil_fuel_codes:\n    tmp2 = tmp.loc[tmp['COMMODITY'] == code]\n    tmp2 = tmp2.drop(['COMMODITY', 'TRANSACTION'], axis=1).rename(columns={'OBS_VALUE': f'{fossil_fuel_codes[code]} Export'})\n    df_emissions = pd.merge(df_emissions, tmp2, on=['REF_AREA', 'TIME_PERIOD'], how='left')\n\ndf = df_emissions.rename(columns={'TIME_PERIOD': 'Year'})\n\n# Reference area is unecessary for our analysis\ndf.drop(columns=['REF_AREA'], axis=1, inplace=True)\n\ntmp = df.pop('Greenhouse Gas Emissions')\ndf.insert(0, 'Greenhouse Gas Emissions', tmp)","kernel":"ianenv","no_halt":true,"pos":5,"scrolled":true,"start":1651443808771,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443808854,"exec_count":5,"id":"339dc3","input":"#df = pd.read_csv('./complete_data.csv')\ndf.info()","kernel":"ianenv","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1290 entries, 0 to 1289\nData columns (total 17 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Greenhouse Gas Emissions       1290 non-null   float64\n 1   Year                           1290 non-null   int64  \n 2   Hard Coal Production           451 non-null    float64\n 3   Natural Gas Production         747 non-null    float64\n 4   Crude Oil Production           724 non-null    float64\n 5   Motor Gasoline Production      879 non-null    float64\n 6   Gas Oil/Diesel Oil Production  879 non-null    float64\n 7   Hard Coal Import               1015 non-null   float64\n 8   Natural Gas Import             921 non-null    float64\n 9   Crude Oil Import               883 non-null    float64\n 10  Motor Gasoline Import          1050 non-null   float64\n 11  Gas Oil/Diesel Oil Import      1059 non-null   float64\n 12  Hard Coal Export               661 non-null    float64\n 13  Natural Gas Export             480 non-null    float64\n 14  Crude Oil Export               546 non-null    float64\n 15  Motor Gasoline Export          930 non-null    float64\n 16  Gas Oil/Diesel Oil Export      966 non-null    float64\ndtypes: float64(16), int64(1)\nmemory usage: 181.4 KB\n"}},"pos":7,"start":1651443808837,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809175,"exec_count":6,"id":"0c5366","input":"# Missing value analysis\ncolumns = list(df.columns)\nmissing_vals = []\nfor col in columns:\n    missing_vals.append(df[col].isna().sum())\n\nfig = px.bar(x=columns, y=missing_vals, title='Missing Value Analysis')\nfig.update_layout(xaxis_title='Column', yaxis_title='Missing Values')\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"134afb5a5078e1c36a7ce1c11987b76ab10b4a71"}}},"pos":8,"start":1651443808862,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809330,"exec_count":7,"id":"301d8e","input":"missing_counts = np.arange(stop=18)\nrow_counts = []\nfor i in missing_counts:\n    row_counts.append(len(df[df.isnull().sum(axis=1) == i].index))\n\nfig = px.bar(x=missing_counts, y=row_counts, title='Row Counts Missing Different Numbers of Values')\nfig.update_layout(xaxis_title='Number of Missing Values', yaxis_title='Number of Rows')\n\nfig.write_html('Charts/missing_val_row_counts.html')\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"fe1b3ae15118d530ed9639f4ad4203b09c7c4a1a"}}},"pos":9,"start":1651443809191,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809349,"exec_count":8,"id":"9b164b","input":"# Energy consumption data is highly colinear with emissions, and not that interesting to explore\n# df = df.drop(['Net Electricity Production', 'Final Energy Consumption', 'Energy Consumption Manufacturing', 'Energy Consumption Transportation', 'Energy Consumption Other', 'Total Energy Supply'], axis=1)","kernel":"ianenv","no_halt":true,"pos":10,"start":1651443809347,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809367,"exec_count":9,"id":"e401dd","input":"# plot distributions\n# ax = df['Energy Consumption Manufacturing'].plot.hist(bins=12, alpha=0.5)\n# NOT A GAUSSIAN/NORMAL DISTRIBUTION","kernel":"ianenv","no_halt":true,"pos":11,"start":1651443809363,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809383,"exec_count":10,"id":"c8ee24","input":"df.info()","kernel":"ianenv","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1290 entries, 0 to 1289\nData columns (total 17 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Greenhouse Gas Emissions       1290 non-null   float64\n 1   Year                           1290 non-null   int64  \n 2   Hard Coal Production           451 non-null    float64\n 3   Natural Gas Production         747 non-null    float64\n 4   Crude Oil Production           724 non-null    float64\n 5   Motor Gasoline Production      879 non-null    float64\n 6   Gas Oil/Diesel Oil Production  879 non-null    float64\n 7   Hard Coal Import               1015 non-null   float64\n 8   Natural Gas Import             921 non-null    float64\n 9   Crude Oil Import               883 non-null    float64\n 10  Motor Gasoline Import          1050 non-null   float64\n 11  Gas Oil/Diesel Oil Import      1059 non-null   float64\n 12  Hard Coal Export               661 non-null    float64\n 13  Natural Gas Export             480 non-null    float64\n 14  Crude Oil Export               546 non-null    float64\n 15  Motor Gasoline Export          930 non-null    float64\n 16  Gas Oil/Diesel Oil Export      966 non-null    float64\ndtypes: float64(16), int64(1)\nmemory usage: 181.4 KB\n"}},"pos":13,"start":1651443809376,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809451,"exec_count":11,"id":"f2fe54","input":"# remove rows with too many missing values\nMAX_MISSING = 5\ndf.drop(df[df.isnull().sum(axis=1)>MAX_MISSING].index,axis=0,inplace=True)\n# https://stackoverflow.com/questions/55207940/remove-the-missing-values-from-the-rows-having-greater-than-5-missing-values-and\n\n# Missing value counts after dropping rows with many missing values \ncolumns = list(df.columns)\nmissing_vals_2 = []\nfor col in columns:\n    missing_vals_2.append(df[col].isna().sum())\n\nfig = px.bar(x=columns, y=missing_vals_2, title='Missing Value Analysis After Dropping Rows')\nfig.update_layout(xaxis_title='Column', yaxis_title='Missing Values')\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"ae1ef29d67b65763df36ae19924489dd34c9601a"}}},"pos":14,"start":1651443809387,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809543,"exec_count":12,"id":"7523e7","input":"# Create combined figure for website\nfig = make_subplots(rows=1, cols=2, shared_yaxes=True, subplot_titles=(\"Initial Missing Values by Column\", \"Missing Values by Column After Dropping Rows\"))\nfig.add_trace(go.Bar(x=columns,\n                         y=missing_vals),\n              row=1, col=1)\n\nfig.add_trace(go.Bar(x=columns,\n                         y=missing_vals_2),\n              row=1, col=2)\n\nfig.update_yaxes(title_text=\"Missing Values\", row=1, col=1)\nfig.update_xaxes(title_text=\"Column\", row=1, col=1)\nfig.update_yaxes(title_text=\"Missing Values\", row=1, col=2)\nfig.update_xaxes(title_text=\"Column\", row=1, col=2)\n\n\n\nfig.update_layout(showlegend=False)\nfig.write_html('Charts/missing_values.html')\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"991ceaff4d9710c14bd04a2a176f520174d20c75"}}},"pos":15,"start":1651443809458,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809599,"exec_count":13,"id":"2d7785","input":"# Show correlation matrix\nfig = px.imshow(df.corr(),title=\"Correlation Matrix\",width=800,height=800)\nfig.update_xaxes(tickangle=-45)\n# fig.write_html(\"Charts/full_cor_mat.html\")\n# fig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"223b0611f0749efef17bb7704427a70ec33ebcf0"}}},"pos":16,"start":1651443809551,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809704,"exec_count":14,"id":"f86696","input":"df.drop(columns=['Hard Coal Export', 'Hard Coal Production', 'Natural Gas Production', 'Crude Oil Production'], axis=1, inplace=True)\n\n# Show correlation matrix\nfig = px.imshow(df.corr(),title=\"Correlation Matrix\",width=800,height=800)\nfig.update_xaxes(tickangle=-45)\nfig.write_html(\"Charts/cor_mat.html\")\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"eefc290168f4f5993108da8a2a2ec4b3e5ea0710"}}},"pos":17,"start":1651443809609,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443809849,"exec_count":15,"id":"ab18cc","input":"fig = px.scatter_matrix(\n    df,\n    dimensions=['Motor Gasoline Production', 'Gas Oil/Diesel Oil Production', 'Crude Oil Import', 'Motor Gasoline Import'],\n    color='Greenhouse Gas Emissions',\n    width=900,\n    height=900)\n\nfig.update_layout(\n    font=dict(\n        size=8,\n    )\n)\n# fig.update_traces(diagonal_visible=False)\n\nfig.write_html('Charts/correlated_variables.html')\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"72421d5a6798385a52d4a8e510bff9ac612b9484"}}},"pos":18,"start":1651443809715,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443810126,"exec_count":17,"id":"38b397","input":"df.drop(columns=['Gas Oil/Diesel Oil Production', 'Motor Gasoline Production', 'Motor Gasoline Import'], axis=1, inplace=True)\n\n# Show correlation matrix\nfig = px.imshow(df.corr(),title=\"Correlation Matrix With Key Features\",width=700,height=700)\nfig.update_xaxes(tickangle=-45)\nfig.write_html(\"Charts/cor_mat_after_drop.html\")\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"cbeee5c682a8e962c672dfa44938015d01567bff"}}},"pos":19,"start":1651443810059,"state":"done","type":"cell"}
{"cell_type":"code","end":1651443810194,"exec_count":18,"id":"0d914f","input":"# fill in missing values and normalize\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\ncolumns = list(df.columns)\n# columns.remove('Greenhouse Gas Emissions')\n\nfor col in columns:\n    # Replace missing values\n    imputer = imputer.fit(df[[col]])\n    df[col] = imputer.transform(df[[col]])\n    # Normalize (no need to subtract min since minimum is 0)\n    df[col] = (df[col] - df[col].abs().min())/(df[col].abs().max() - df[col].abs().min())\n\ndf.to_csv('complete_data.csv', index=False)","kernel":"ianenv","no_halt":true,"pos":20,"start":1651443810135,"state":"done","type":"cell"}
{"cell_type":"code","id":"f1e3eb","input":"","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"65e5c9","input":"# Preprocessing and Cleaning\n\n","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7c9877","input":"# Imports\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9a7ac0","input":"# Compiling Data\n\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d66b6f","input":"# EDA\n\n","pos":6,"state":"done","type":"cell"}
{"end":1651443810047,"exec_count":16,"id":"3d1748","input":"# Create combined figure for website\nfig = make_subplots(rows=2, cols=2, shared_yaxes=True)\n\nfig.add_trace(go.Scatter(x=df['Motor Gasoline Production'],\n                         y=df['Greenhouse Gas Emissions'],\n                 mode='markers',\n                 name='Motor Gasoline Production'),\n              row=1, col=1)\nfig.add_trace(go.Scatter(x=df['Gas Oil/Diesel Oil Production'],\n                         y=df['Greenhouse Gas Emissions'],\n                 mode='markers',\n                 name='Gas Oil/Diesel Oil Production'),\n              row=1, col=2)\nfig.add_trace(go.Scatter(x=df['Crude Oil Import'],\n                         y=df['Greenhouse Gas Emissions'],\n                 mode='markers',\n                 name='Crude Oil Import'),\n              row=2, col=1)\nfig.add_trace(go.Scatter(x=df['Motor Gasoline Import'],\n                         y=df['Greenhouse Gas Emissions'],\n                 mode='markers',\n                 name='Motor Gasoline Import'),\n              row=2, col=2)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Motor Gasoline Production\", row=1, col=1)\nfig.update_xaxes(title_text=\"Gas Oil/Diesel Oil Production\", row=1, col=2)\nfig.update_xaxes(title_text=\"Crude Oil Import\", row=2, col=1)\nfig.update_xaxes(title_text=\"Motor Gasoline Import\", row=2, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Emissions\", row=1, col=1)\nfig.update_yaxes(title_text=\"Emissions\", row=1, col=2)\nfig.update_yaxes(title_text=\"Emissions\", row=2, col=1)\nfig.update_yaxes(title_text=\"Emissions\", row=2, col=2)\n\nfig.update_layout(showlegend=False)\n\nfig.write_html('Charts/emissions_vs_correlated_fuels.html')\nfig.show()","kernel":"ianenv","no_halt":true,"output":{"0":{"data":{"iframe":"f5a39a0b6a63231db5bea6b264d8151ed2c9fb4f"}}},"pos":18.5,"start":1651443809862,"state":"done","type":"cell"}
{"id":0,"time":1651443149205,"type":"user"}
{"last_load":1651431488758,"type":"file"}